{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pupmega/codefellows/onewiththeplants/screens/Explore.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Game from \"../components/Game\";\nimport { Card, Badge, Button, Block, Text, Divider } from \"../components\";\nimport { theme, mocks } from \"../constants\";\n\nvar BasicSvg = function BasicSvg() {\n  React.createElement(\"svg\", {\n    width: \"100\",\n    height: \"100\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"circle\", {\n    cx: \"50\",\n    cy: \"50\",\n    r: \"40\",\n    stroke: \"blue\",\n    fill: \"lightblue\"\n  }));\n};\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width;\n\nvar Explore = function (_React$Component) {\n  _inherits(Explore, _React$Component);\n\n  var _super = _createSuper(Explore);\n\n  function Explore() {\n    var _this2;\n\n    _classCallCheck(this, Explore);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      plants1: [],\n      plants2: [],\n      shopPlants: []\n    };\n    return _this2;\n  }\n\n  _createClass(Explore, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        plants1: this.props.plants1\n      });\n      this.setState({\n        plants2: this.props.plants2\n      });\n      this.setState({\n        shopPlants: this.props.shopPlants\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          profile = _this$props.profile,\n          navigation = _this$props.navigation;\n      var plants1 = this.state.plants1;\n      var plants2 = this.state.plants2;\n      var shopPlants = this.state.shopPlants;\n      var category = navigation.getParam('category');\n      var plant = navigation.getParam('plant') || 'plant';\n\n      var If = function If(props) {\n        return props.condition ? props.children : null;\n      };\n\n      return React.createElement(React.Fragment, null, React.createElement(If, {\n        condition: category.name === 'Happy Terrarium'\n      }, React.createElement(Block, null, React.createElement(Block, {\n        flex: false,\n        row: true,\n        center: true,\n        space: \"between\",\n        style: styles.header\n      }, React.createElement(Text, {\n        h1: true,\n        bold: true\n      }, category.name), React.createElement(Button, {\n        onPress: function onPress() {\n          return navigation.navigate(\"Settings\");\n        }\n      }, React.createElement(Image, {\n        source: profile.avatar,\n        style: styles.avatar\n      }))), React.createElement(Block, {\n        center: true,\n        middle: true\n      }, React.createElement(Text, null, plant.name), React.createElement(Image, {\n        source: plant.image\n      }), React.createElement(Text, null, plant.status)), React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        style: {\n          paddingVertical: theme.sizes.base * 2\n        }\n      }, React.createElement(Divider, {\n        margin: [theme.sizes.base, theme.sizes.base * 2]\n      }), React.createElement(Block, {\n        flex: false,\n        row: true,\n        space: \"between\",\n        style: styles.categories\n      }, plants1.map(function (plant) {\n        return React.createElement(TouchableOpacity, {\n          key: plant.name,\n          onPress: function onPress() {\n            return navigation.navigate(\"Explore\", {\n              plant: plant\n            });\n          }\n        }, React.createElement(Card, {\n          center: true,\n          middle: true,\n          shadow: true,\n          style: styles.category\n        }, React.createElement(Badge, {\n          margin: [0, 0, 15],\n          size: 50,\n          color: \"rgba(41,216,143,0.20)\"\n        }, React.createElement(Image, {\n          source: plant.image\n        })), React.createElement(Text, {\n          medium: true,\n          height: 20\n        }, plant.name), React.createElement(Text, {\n          gray: true,\n          caption: true\n        }, plant.description)));\n      }))))), React.createElement(If, {\n        condition: category.name === 'Lucky Terrarium'\n      }, React.createElement(Block, null, React.createElement(Block, {\n        flex: false,\n        row: true,\n        center: true,\n        space: \"between\",\n        style: styles.header\n      }, React.createElement(Text, {\n        h1: true,\n        bold: true\n      }, category.name), React.createElement(Button, {\n        onPress: function onPress() {\n          return navigation.navigate(\"Settings\");\n        }\n      }, React.createElement(Image, {\n        source: profile.avatar,\n        style: styles.avatar\n      }))), React.createElement(Block, {\n        center: true,\n        middle: true\n      }, React.createElement(Text, null, plant.name), React.createElement(Image, {\n        source: plant.image\n      }), React.createElement(Text, null, plant.status)), React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        style: {\n          paddingVertical: theme.sizes.base * 2\n        }\n      }, React.createElement(Divider, {\n        margin: [theme.sizes.base, theme.sizes.base * 2]\n      }), React.createElement(Block, {\n        flex: false,\n        row: true,\n        space: \"between\",\n        style: styles.categories\n      }, plants2.map(function (plant) {\n        return React.createElement(TouchableOpacity, {\n          key: plant.name,\n          onPress: function onPress() {\n            return navigation.navigate(\"Explore\", {\n              plant: plant\n            });\n          }\n        }, React.createElement(Card, {\n          center: true,\n          middle: true,\n          shadow: true,\n          style: styles.category\n        }, React.createElement(Badge, {\n          margin: [0, 0, 15],\n          size: 50,\n          color: \"rgba(41,216,143,0.20)\"\n        }, React.createElement(Image, {\n          source: plant.image\n        })), React.createElement(Text, {\n          medium: true,\n          height: 20\n        }, plant.name), React.createElement(Text, {\n          gray: true,\n          caption: true\n        }, plant.description)));\n      }))))), React.createElement(If, {\n        condition: category.name === 'Shop'\n      }, React.createElement(Block, null, React.createElement(Block, {\n        flex: false,\n        row: true,\n        center: true,\n        space: \"between\",\n        style: styles.header\n      }, React.createElement(Text, {\n        h1: true,\n        bold: true\n      }, category.name), React.createElement(Button, {\n        onPress: function onPress() {\n          return navigation.navigate(\"Settings\");\n        }\n      }, React.createElement(Image, {\n        source: profile.avatar,\n        style: styles.avatar\n      }))), React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        style: {\n          paddingVertical: theme.sizes.base * 2\n        }\n      }, React.createElement(Block, {\n        center: true,\n        middle: true\n      }, React.createElement(Text, null, plant.name), React.createElement(Image, {\n        source: plant.image\n      }), React.createElement(Text, null, plant.price)), React.createElement(Divider, {\n        margin: [theme.sizes.base, theme.sizes.base * 2]\n      }), React.createElement(Block, {\n        flex: false,\n        row: true,\n        space: \"between\",\n        style: styles.categories\n      }, shopPlants.map(function (plant) {\n        return React.createElement(TouchableOpacity, {\n          key: plant.name,\n          onPress: function onPress() {\n            return navigation.navigate(\"Explore\", {\n              plant: plant\n            });\n          }\n        }, React.createElement(Card, {\n          center: true,\n          middle: true,\n          shadow: true,\n          style: styles.category\n        }, React.createElement(Badge, {\n          margin: [0, 0, 15],\n          size: 50,\n          color: \"rgba(41,216,143,0.20)\"\n        }, React.createElement(Image, {\n          source: plant.image\n        })), React.createElement(Text, {\n          medium: true,\n          height: 20\n        }, plant.name), React.createElement(Text, {\n          gray: true,\n          caption: true\n        }, plant.description)));\n      }))))), React.createElement(If, {\n        condition: category.name === 'Tic Tac Toe'\n      }, React.createElement(Block, {\n        center: true\n      }, React.createElement(Game, null))));\n    }\n  }]);\n\n  return Explore;\n}(React.Component);\n\nexport { Explore as default };\nExplore.defaultProps = {\n  profile: mocks.profile,\n  plants1: mocks.plants1,\n  plants2: mocks.plants2,\n  shopPlants: mocks.shopPlants\n};\nvar styles = StyleSheet.create({\n  header: {\n    paddingHorizontal: theme.sizes.base * 2\n  },\n  avatar: {\n    height: theme.sizes.base * 3.2,\n    width: theme.sizes.base * 3.2,\n    backgroundColor: 'transparent'\n  },\n  categories: {\n    flexWrap: \"wrap\",\n    paddingHorizontal: theme.sizes.base * 2,\n    marginBottom: theme.sizes.base * 3.5\n  },\n  category: {\n    minWidth: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2,\n    maxWidth: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2,\n    maxHeight: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2\n  }\n});","map":{"version":3,"sources":["/Users/pupmega/codefellows/onewiththeplants/screens/Explore.js"],"names":["React","Component","Game","Card","Badge","Button","Block","Text","Divider","theme","mocks","BasicSvg","Dimensions","get","width","Explore","state","plants1","plants2","shopPlants","setState","props","profile","navigation","category","getParam","plant","If","condition","children","name","styles","header","navigate","avatar","image","status","paddingVertical","sizes","base","categories","map","description","price","defaultProps","StyleSheet","create","paddingHorizontal","height","backgroundColor","flexWrap","marginBottom","minWidth","padding","maxWidth","maxHeight"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAQA,OAAOC,IAAP;AAEA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2CC,OAA3C;AACA,SAASC,KAAT,EAAgBC,KAAhB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAK;AACpB;AAAK,IAAA,KAAK,EAAC,KAAX;AAAiB,IAAA,MAAM,EAAC,KAAxB;AAA8B,IAAA,KAAK,EAAC;AAApC,KACE;AACE,IAAA,EAAE,EAAC,IADL;AAEE,IAAA,EAAE,EAAC,IAFL;AAGE,IAAA,CAAC,EAAC,IAHJ;AAIE,IAAA,MAAM,EAAC,MAJT;AAKE,IAAA,IAAI,EAAC;AALP,IADF;AAQO,CATT;;sBAWkBC,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAVC,K,mBAAAA,K;;IAEaC,O;;;;;;;;;;;;;;;WAEjBC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,OAAO,EAAE,EAFL;AAGJC,MAAAA,UAAU,EAAE;AAHR,K;;;;;;wCAMc;AAClB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAE,KAAKI,KAAL,CAAWJ;AAAtB,OAAd;AACA,WAAKG,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE,KAAKG,KAAL,CAAWH;AAAtB,OAAd;AACA,WAAKE,QAAL,CAAc;AAAED,QAAAA,UAAU,EAAE,KAAKE,KAAL,CAAWF;AAAzB,OAAd;AACD;;;6BAEK;AAAA;;AAAA,wBAE0B,KAAKE,KAF/B;AAAA,UAEGC,OAFH,eAEGA,OAFH;AAAA,UAEYC,UAFZ,eAEYA,UAFZ;AAAA,UAGIN,OAHJ,GAGgB,KAAKD,KAHrB,CAGIC,OAHJ;AAAA,UAIIC,OAJJ,GAIgB,KAAKF,KAJrB,CAIIE,OAJJ;AAAA,UAKIC,UALJ,GAKmB,KAAKH,KALxB,CAKIG,UALJ;AAMJ,UAAMK,QAAQ,GAAGD,UAAU,CAACE,QAAX,CAAoB,UAApB,CAAjB;AACA,UAAMC,KAAK,GAAGH,UAAU,CAACE,QAAX,CAAoB,OAApB,KAAgC,OAA9C;;AAGA,UAAME,EAAE,GAAG,SAALA,EAAK,CAACN,KAAD,EAAW;AAClB,eAAOA,KAAK,CAACO,SAAN,GAAkBP,KAAK,CAACQ,QAAxB,GAAmC,IAA1C;AACD,OAFH;;AAIA,aACI,0CACA,oBAAC,EAAD;AAAI,QAAA,SAAS,EAAEL,QAAQ,CAACM,IAAT,KAAkB;AAAjC,SAEA,oBAAC,KAAD,QACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,MAAM,MAA9B;AAA+B,QAAA,KAAK,EAAC,SAArC;AAA+C,QAAA,KAAK,EAAEC,MAAM,CAACC;AAA7D,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,MAAR;AAAS,QAAA,IAAI;AAAb,SACCR,QAAQ,CAACM,IADV,CADJ,EAII,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMP,UAAU,CAACU,QAAX,CAAoB,UAApB,CAAN;AAAA;AAAjB,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEX,OAAO,CAACY,MAAvB;AAA+B,QAAA,KAAK,EAAEH,MAAM,CAACG;AAA7C,QADJ,CAJJ,CADJ,EASI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAc,QAAA,MAAM;AAApB,SAEI,oBAAC,IAAD,QAAOR,KAAK,CAACI,IAAb,CAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEJ,KAAK,CAACS;AAArB,QAHJ,EAII,oBAAC,IAAD,QAAOT,KAAK,CAACU,MAAb,CAJJ,CATJ,EAgBI,oBAAC,UAAD;AACA,QAAA,4BAA4B,EAAE,KAD9B;AAEA,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE5B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB;AAAtC;AAFP,SAII,oBAAC,OAAD;AAAS,QAAA,MAAM,EAAE,CAAC9B,KAAK,CAAC6B,KAAN,CAAYC,IAAb,EAAmB9B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,CAAtC;AAAjB,QAJJ,EAKI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,KAAK,EAAC,SAA9B;AAAwC,QAAA,KAAK,EAAER,MAAM,CAACS;AAAtD,SACCvB,OAAO,CAACwB,GAAR,CAAY,UAAAf,KAAK;AAAA,eACd,oBAAC,gBAAD;AACA,UAAA,GAAG,EAAEA,KAAK,CAACI,IADX;AAEA,UAAA,OAAO,EAAE;AAAA,mBAAMP,UAAU,CAACU,QAAX,CAAoB,SAApB,EAA+B;AAAEP,cAAAA,KAAK,EAALA;AAAF,aAA/B,CAAN;AAAA;AAFT,WAII,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,MAAnB;AAAoB,UAAA,MAAM,MAA1B;AAA2B,UAAA,KAAK,EAAEK,MAAM,CAACP;AAAzC,WACA,oBAAC,KAAD;AACA,UAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CADR;AAEA,UAAA,IAAI,EAAE,EAFN;AAGA,UAAA,KAAK,EAAC;AAHN,WAKA,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEE,KAAK,CAACS;AAArB,UALA,CADA,EAQA,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,EAAE;AAArB,WACCT,KAAK,CAACI,IADP,CARA,EAWA,oBAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,OAAO;AAAlB,WACCJ,KAAK,CAACgB,WADP,CAXA,CAJJ,CADc;AAAA,OAAjB,CADD,CALJ,CAhBJ,CAFA,CADA,EA0DA,oBAAC,EAAD;AAAI,QAAA,SAAS,EAAElB,QAAQ,CAACM,IAAT,KAAkB;AAAjC,SACA,oBAAC,KAAD,QACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,MAAM,MAA9B;AAA+B,QAAA,KAAK,EAAC,SAArC;AAA+C,QAAA,KAAK,EAAEC,MAAM,CAACC;AAA7D,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,MAAR;AAAS,QAAA,IAAI;AAAb,SACCR,QAAQ,CAACM,IADV,CADJ,EAII,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMP,UAAU,CAACU,QAAX,CAAoB,UAApB,CAAN;AAAA;AAAjB,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEX,OAAO,CAACY,MAAvB;AAA+B,QAAA,KAAK,EAAEH,MAAM,CAACG;AAA7C,QADJ,CAJJ,CADJ,EASI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAc,QAAA,MAAM;AAApB,SAEI,oBAAC,IAAD,QAAOR,KAAK,CAACI,IAAb,CAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEJ,KAAK,CAACS;AAArB,QAHJ,EAII,oBAAC,IAAD,QAAOT,KAAK,CAACU,MAAb,CAJJ,CATJ,EAgBI,oBAAC,UAAD;AACA,QAAA,4BAA4B,EAAE,KAD9B;AAEA,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE5B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB;AAAtC;AAFP,SAII,oBAAC,OAAD;AAAS,QAAA,MAAM,EAAE,CAAC9B,KAAK,CAAC6B,KAAN,CAAYC,IAAb,EAAmB9B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,CAAtC;AAAjB,QAJJ,EAKI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,KAAK,EAAC,SAA9B;AAAwC,QAAA,KAAK,EAAER,MAAM,CAACS;AAAtD,SACCtB,OAAO,CAACuB,GAAR,CAAY,UAAAf,KAAK;AAAA,eACd,oBAAC,gBAAD;AACA,UAAA,GAAG,EAAEA,KAAK,CAACI,IADX;AAEA,UAAA,OAAO,EAAE;AAAA,mBAAMP,UAAU,CAACU,QAAX,CAAoB,SAApB,EAA+B;AAAEP,cAAAA,KAAK,EAALA;AAAF,aAA/B,CAAN;AAAA;AAFT,WAII,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,MAAnB;AAAoB,UAAA,MAAM,MAA1B;AAA2B,UAAA,KAAK,EAAEK,MAAM,CAACP;AAAzC,WACA,oBAAC,KAAD;AACA,UAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CADR;AAEA,UAAA,IAAI,EAAE,EAFN;AAGA,UAAA,KAAK,EAAC;AAHN,WAKA,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEE,KAAK,CAACS;AAArB,UALA,CADA,EAQA,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,EAAE;AAArB,WACCT,KAAK,CAACI,IADP,CARA,EAWA,oBAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,OAAO;AAAlB,WACCJ,KAAK,CAACgB,WADP,CAXA,CAJJ,CADc;AAAA,OAAjB,CADD,CALJ,CAhBJ,CADA,CA1DA,EA+GA,oBAAC,EAAD;AAAI,QAAA,SAAS,EAAElB,QAAQ,CAACM,IAAT,KAAkB;AAAjC,SACA,oBAAC,KAAD,QACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,MAAM,MAA9B;AAA+B,QAAA,KAAK,EAAC,SAArC;AAA+C,QAAA,KAAK,EAAEC,MAAM,CAACC;AAA7D,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,MAAR;AAAS,QAAA,IAAI;AAAb,SACCR,QAAQ,CAACM,IADV,CADJ,EAII,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMP,UAAU,CAACU,QAAX,CAAoB,UAApB,CAAN;AAAA;AAAjB,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEX,OAAO,CAACY,MAAvB;AAA+B,QAAA,KAAK,EAAEH,MAAM,CAACG;AAA7C,QADJ,CAJJ,CADJ,EAWI,oBAAC,UAAD;AACA,QAAA,4BAA4B,EAAE,KAD9B;AAEA,QAAA,KAAK,EAAE;AAAEG,UAAAA,eAAe,EAAE5B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB;AAAtC;AAFP,SAKA,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAc,QAAA,MAAM;AAApB,SAEI,oBAAC,IAAD,QAAOb,KAAK,CAACI,IAAb,CAFJ,EAGI,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAEJ,KAAK,CAACS;AAArB,QAHJ,EAII,oBAAC,IAAD,QAAOT,KAAK,CAACiB,KAAb,CAJJ,CALA,EAYA,oBAAC,OAAD;AAAS,QAAA,MAAM,EAAE,CAAClC,KAAK,CAAC6B,KAAN,CAAYC,IAAb,EAAmB9B,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,CAAtC;AAAjB,QAZA,EAcI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAb;AAAoB,QAAA,GAAG,MAAvB;AAAwB,QAAA,KAAK,EAAC,SAA9B;AAAwC,QAAA,KAAK,EAAER,MAAM,CAACS;AAAtD,SACCrB,UAAU,CAACsB,GAAX,CAAe,UAAAf,KAAK;AAAA,eACjB,oBAAC,gBAAD;AACA,UAAA,GAAG,EAAEA,KAAK,CAACI,IADX;AAEA,UAAA,OAAO,EAAE;AAAA,mBAAMP,UAAU,CAACU,QAAX,CAAoB,SAApB,EAA+B;AAAEP,cAAAA,KAAK,EAALA;AAAF,aAA/B,CAAN;AAAA;AAFT,WAII,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,MAAnB;AAAoB,UAAA,MAAM,MAA1B;AAA2B,UAAA,KAAK,EAAEK,MAAM,CAACP;AAAzC,WACA,oBAAC,KAAD;AACA,UAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CADR;AAEA,UAAA,IAAI,EAAE,EAFN;AAGA,UAAA,KAAK,EAAC;AAHN,WAKA,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEE,KAAK,CAACS;AAArB,UALA,CADA,EAQA,oBAAC,IAAD;AAAM,UAAA,MAAM,MAAZ;AAAa,UAAA,MAAM,EAAE;AAArB,WACCT,KAAK,CAACI,IADP,CARA,EAWA,oBAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,OAAO;AAAlB,WACCJ,KAAK,CAACgB,WADP,CAXA,CAJJ,CADiB;AAAA,OAApB,CADD,CAdJ,CAXJ,CADA,CA/GA,EAwKA,oBAAC,EAAD;AAAI,QAAA,SAAS,EAAElB,QAAQ,CAACM,IAAT,KAAkB;AAAjC,SACA,oBAAC,KAAD;AAAO,QAAA,MAAM;AAAb,SACY,oBAAC,IAAD,OADZ,CADA,CAxKA,CADJ;AAkLH;;;;EA9MgC9B,KAAK,CAACC,S;;SAAtBc,O;AAkNrBA,OAAO,CAAC6B,YAAR,GAAuB;AACnBtB,EAAAA,OAAO,EAAEZ,KAAK,CAACY,OADI;AAEnBL,EAAAA,OAAO,EAAEP,KAAK,CAACO,OAFI;AAGnBC,EAAAA,OAAO,EAAER,KAAK,CAACQ,OAHI;AAInBC,EAAAA,UAAU,EAAET,KAAK,CAACS;AAJC,CAAvB;AAOA,IAAMY,MAAM,GAAGc,UAAU,CAACC,MAAX,CAAkB;AAC7Bd,EAAAA,MAAM,EAAE;AACNe,IAAAA,iBAAiB,EAAEtC,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB;AADhC,GADqB;AAI7BL,EAAAA,MAAM,EAAE;AACNc,IAAAA,MAAM,EAAEvC,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,GADrB;AAENzB,IAAAA,KAAK,EAAEL,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,GAFpB;AAGNU,IAAAA,eAAe,EAAE;AAHX,GAJqB;AAS7BT,EAAAA,UAAU,EAAE;AACRU,IAAAA,QAAQ,EAAE,MADF;AAERH,IAAAA,iBAAiB,EAAEtC,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB,CAF9B;AAGRY,IAAAA,YAAY,EAAE1C,KAAK,CAAC6B,KAAN,CAAYC,IAAZ,GAAmB;AAHzB,GATiB;AAc7Bf,EAAAA,QAAQ,EAAE;AAEN4B,IAAAA,QAAQ,EAAE,CAACtC,KAAK,GAAGL,KAAK,CAAC6B,KAAN,CAAYe,OAAZ,GAAsB,GAA9B,GAAoC5C,KAAK,CAAC6B,KAAN,CAAYC,IAAjD,IAAyD,CAF7D;AAGNe,IAAAA,QAAQ,EAAE,CAACxC,KAAK,GAAGL,KAAK,CAAC6B,KAAN,CAAYe,OAAZ,GAAsB,GAA9B,GAAoC5C,KAAK,CAAC6B,KAAN,CAAYC,IAAjD,IAAyD,CAH7D;AAINgB,IAAAA,SAAS,EAAE,CAACzC,KAAK,GAAGL,KAAK,CAAC6B,KAAN,CAAYe,OAAZ,GAAsB,GAA9B,GAAoC5C,KAAK,CAAC6B,KAAN,CAAYC,IAAjD,IAAyD;AAJ9D;AAdmB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Dimensions,\n  Image,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity\n} from \"react-native\";\nimport Game from \"../components/Game\";\n\nimport { Card, Badge, Button, Block, Text, Divider } from \"../components\";\nimport { theme, mocks } from \"../constants\";\nconst BasicSvg = () =>{\n  <svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle\n      cx=\"50\"\n      cy=\"50\"\n      r=\"40\"\n      stroke=\"blue\"\n      fill=\"lightblue\"\n    />\n  </svg>}\n\nconst { width } = Dimensions.get(\"window\");\n\nexport default class Explore extends React.Component {\n\n    state = {\n        plants1: [],\n        plants2: [],\n        shopPlants: [],\n      };\n\n      componentDidMount() {\n        this.setState({ plants1: this.props.plants1 });\n        this.setState({ plants2: this.props.plants2});\n        this.setState({ shopPlants: this.props.shopPlants});\n      }\n\n    render(){\n        \n        const {profile, navigation} = this.props;\n        const { plants1 } = this.state;\n        const { plants2 } = this.state;\n        const { shopPlants } = this.state;\n        const category = navigation.getParam('category');\n        const plant = navigation.getParam('plant') || 'plant';\n        \n\n        const If = (props) => {\n            return props.condition ? props.children : null;\n          }\n\n        return (\n            <>\n            <If condition={category.name === 'Happy Terrarium'}>\n            \n            <Block>\n                <Block flex={false} row center space=\"between\" style={styles.header}>\n                    <Text h1 bold>\n                    {category.name}\n                    </Text>\n                    <Button onPress={() => navigation.navigate(\"Settings\")}>\n                        <Image source={profile.avatar} style={styles.avatar} />\n                    </Button>\n                </Block>\n                <Block center middle>\n                    \n                    <Text>{plant.name}</Text>\n                    <Image source={plant.image} />\n                    <Text>{plant.status}</Text>    \n                </Block>\n                \n                <ScrollView\n                showsVerticalScrollIndicator={false}\n                style={{ paddingVertical: theme.sizes.base * 2 }}\n                >\n                    <Divider margin={[theme.sizes.base, theme.sizes.base * 2]} />\n                    <Block flex={false} row space=\"between\" style={styles.categories}>\n                    {plants1.map(plant=> (\n                        <TouchableOpacity\n                        key={plant.name}\n                        onPress={() => navigation.navigate(\"Explore\", { plant })}\n                        >\n                            <Card center middle shadow style={styles.category}>\n                            <Badge\n                            margin={[0, 0, 15]}\n                            size={50}\n                            color=\"rgba(41,216,143,0.20)\"\n                            >\n                            <Image source={plant.image} />\n                            </Badge>\n                            <Text medium height={20}>\n                            {plant.name}\n                            </Text>\n                            <Text gray caption>\n                            {plant.description} \n                            </Text>\n                            </Card>\n                        </TouchableOpacity>\n                        ))}\n                    </Block>\n                </ScrollView>\n\n            </Block>\n            </If>\n\n\n            {/* If lucky terrarium */}\n            \n            \n            \n            <If condition={category.name === 'Lucky Terrarium'}>\n            <Block>\n                <Block flex={false} row center space=\"between\" style={styles.header}>\n                    <Text h1 bold>\n                    {category.name}\n                    </Text>\n                    <Button onPress={() => navigation.navigate(\"Settings\")}>\n                        <Image source={profile.avatar} style={styles.avatar} />\n                    </Button>\n                </Block>\n                <Block center middle>\n                    \n                    <Text>{plant.name}</Text>\n                    <Image source={plant.image} />\n                    <Text>{plant.status}</Text>    \n                    \n                </Block>\n                <ScrollView\n                showsVerticalScrollIndicator={false}\n                style={{ paddingVertical: theme.sizes.base * 2 }}\n                >\n                    <Divider margin={[theme.sizes.base, theme.sizes.base * 2]} />\n                    <Block flex={false} row space=\"between\" style={styles.categories}>\n                    {plants2.map(plant=> (\n                        <TouchableOpacity\n                        key={plant.name}\n                        onPress={() => navigation.navigate(\"Explore\", { plant })}\n                        >\n                            <Card center middle shadow style={styles.category}>\n                            <Badge\n                            margin={[0, 0, 15]}\n                            size={50}\n                            color=\"rgba(41,216,143,0.20)\"\n                            >\n                            <Image source={plant.image} />\n                            </Badge>\n                            <Text medium height={20}>\n                            {plant.name}\n                            </Text>\n                            <Text gray caption>\n                            {plant.description} \n                            </Text>\n                            </Card>\n                        </TouchableOpacity>\n                        ))}\n                    </Block>\n                </ScrollView>\n\n            </Block>\n            </If>\n\n            {/* Store */}\n\n            <If condition={category.name === 'Shop'}>\n            <Block>\n                <Block flex={false} row center space=\"between\" style={styles.header}>\n                    <Text h1 bold>\n                    {category.name}\n                    </Text>\n                    <Button onPress={() => navigation.navigate(\"Settings\")}>\n                        <Image source={profile.avatar} style={styles.avatar} />\n                    </Button>\n                </Block>\n                \n\n                <ScrollView\n                showsVerticalScrollIndicator={false}\n                style={{ paddingVertical: theme.sizes.base * 2 }}\n                >\n\n                <Block center middle>\n                    \n                    <Text>{plant.name}</Text>\n                    <Image source={plant.image} />\n                    <Text>{plant.price}</Text>   \n                </Block>\n\n                <Divider margin={[theme.sizes.base, theme.sizes.base * 2]} />\n                \n                    <Block flex={false} row space=\"between\" style={styles.categories}>\n                    {shopPlants.map(plant=> (\n                        <TouchableOpacity\n                        key={plant.name}\n                        onPress={() => navigation.navigate(\"Explore\", { plant })}\n                        >\n                            <Card center middle shadow style={styles.category}>\n                            <Badge\n                            margin={[0, 0, 15]}\n                            size={50}\n                            color=\"rgba(41,216,143,0.20)\"\n                            >\n                            <Image source={plant.image} />\n                            </Badge>\n                            <Text medium height={20}>\n                            {plant.name}\n                            </Text>\n                            <Text gray caption>\n                            {plant.description} \n                            </Text>\n                            </Card>\n                        </TouchableOpacity>\n                        ))}\n                    </Block>\n                </ScrollView>\n\n            </Block>\n            </If>\n\n            {/* tic tack toe */}\n\n            <If condition={category.name === 'Tic Tac Toe'}>\n            <Block center>\n                        <Game />\n            </Block>\n            </If>\n\n\n            </>\n        );\n    }\n  \n}\n\nExplore.defaultProps = {\n    profile: mocks.profile,\n    plants1: mocks.plants1,\n    plants2: mocks.plants2,\n    shopPlants: mocks.shopPlants\n  };\n\nconst styles = StyleSheet.create({\n    header: {\n      paddingHorizontal: theme.sizes.base * 2\n    },\n    avatar: {\n      height: theme.sizes.base * 3.2,\n      width: theme.sizes.base * 3.2,\n      backgroundColor: 'transparent',\n    },\n    categories: {\n        flexWrap: \"wrap\",\n        paddingHorizontal: theme.sizes.base * 2,\n        marginBottom: theme.sizes.base * 3.5\n      },\n    category: {\n        // this should be dynamic based on screen width\n        minWidth: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2,\n        maxWidth: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2,\n        maxHeight: (width - theme.sizes.padding * 2.4 - theme.sizes.base) / 2\n    }\n\n  });"]},"metadata":{},"sourceType":"module"}